#!/usr/bin/env bash

# Exit on error, error on unset variables, and fail pipelines on first error.
set -euo pipefail

# ===== CONFIGURATION =====
# Color constants for clearer output
bold=$(tput bold)
cyan=$(tput setaf 6)
green=$(tput setaf 2)

# Directory and file paths
readonly mrk1_dir="$HOME/mrk1"
readonly dotfiles_dir="$mrk1_dir/dotfiles"
readonly scripts_dir="$mrk1_dir/scripts"
readonly assets_dir="$mrk1_dir/assets"
readonly bin_dir="$HOME/.local/bin"
readonly omz_custom_dir="$HOME/.oh-my-zsh/custom"

# Lists of files to be symlinked
dotfiles_to_link=(
  ".aliases"
  ".zshenv"
  ".zshrc"
)
scripts_to_link=(
  "backup"
  "restore"
  "syncall"
)

# ===== FUNCTIONS =====

# Prints a formatted header message.
header() {
  echo
  echo "${cyan}${bold}==> ${*}...${reset:-}"
}

# Creates symlinks for a list of files into a destination directory.
# Usage: create_symlinks "destination_dir" "source_dir" "file_list_array"
create_symlinks() {
  local dest_dir="$1"
  local source_dir="$2"
  shift 2
  local files=("$@")

  header "Linking files to $dest_dir"
  mkdir -p "$dest_dir" # Ensure destination directory exists

  for file in "${files[@]}"; do
    local source_file="$source_dir/$file"
    if [[ -r "$source_file" && -f "$source_file" ]]; then
      ln -sf "$source_file" "$dest_dir/"
      echo "  Linked $file"
    else
      echo "  Skipping $file (not a readable file)"
    fi
  done
}

# ===== MAIN SCRIPT LOGIC =====
main() {
  header "Setting up mrk1 configuration"

  # Copy static config files
  cp -fv "$assets_dir/topgrade.toml" "$HOME/.config/"
  cp -fv "$assets_dir/Brewfile" "$HOME/"

  # Create symlinks using the reusable function
  create_symlinks "$HOME" "$dotfiles_dir" "${dotfiles_to_link[@]}"
  create_symlinks "$bin_dir" "$scripts_dir" "${scripts_to_link[@]}"
  create_symlinks "$omz_custom_dir" "$dotfiles_dir" ".aliases" # Handle single file

  # Apply macOS default tweaks
  header "Applying macOS default tweaks"
  if [[ -f "$scripts_dir/macdefaults.sh" ]]; then
    bash "$scripts_dir/macdefaults.sh"
  else
    echo "macdefaults.sh not found, skipping."
  fi

  # Suppress "Last login" message
  touch "$HOME/.hushlogin"

  # Prompt to run Homebrew bundle
  header "Homebrew Bundle Installation"
  read -p "Run 'brew bundle install'? (y/n): " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ || "${1-}" == "--run-brew" ]]; then
    cd "$HOME" && brew bundle install --verbose --no-lock
  else
    echo "Skipping Homebrew installation."
  fi

  echo
  echo "${green}${bold}âœ… Setup complete!${reset:-}"
}

# Run the main function, passing along any command-line arguments
main "$@"
