#!/usr/bin/env bash
set -euo pipefail

# ==============================
#   Utility Functions
# ==============================
header() { echo -e "\n\033[1;34m==> $1\033[0m\n"; }
success() { echo -e "\033[1;32mâœ” $1\033[0m"; }
warn() { echo -e "\033[1;33mâš  $1\033[0m"; }
error() { echo -e "\033[1;31mâœ– $1\033[0m"; }

keep_sudo_alive() {
  sudo -v
  while true; do
    sleep 60
    sudo -n true
    kill -0 "$$" || exit
  done 2>/dev/null &
}

check_network() {
  if ! ping -c 1 github.com &>/dev/null; then
    error "No internet connection detected. Exiting."
    exit 1
  fi
}

# ==============================
#   Install Steps
# ==============================
install_xcode_cli() {
  if ! xcode-select -p &>/dev/null; then
    header "Installing Xcode Command Line Tools"
    xcode-select --install || true
    until xcode-select -p &>/dev/null; do
      sleep 5
    done
    success "Xcode Command Line Tools installed"
  else
    success "Xcode Command Line Tools already installed"
  fi
}

install_homebrew() {
  if ! command -v brew &>/dev/null; then
    header "Installing Homebrew"
    NONINTERACTIVE=1 /bin/bash -c \
      "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    eval "$(/opt/homebrew/bin/brew shellenv)"
    success "Homebrew installed"
  else
    success "Homebrew already installed"
    eval "$(/opt/homebrew/bin/brew shellenv)"
  fi
}

install_core_tools() {
  header "Installing core tools with Homebrew"
  local core_brewfile
  core_brewfile=$(mktemp)
  cat <<EOF > "$core_brewfile"
cask "iterm2"
cask "pulsar"
brew "git"
brew "gh"
brew "zsh"
brew "coreutils"
brew "topgrade"
brew "bat"
brew "pwgen"
EOF
  if ! brew bundle check --file="$core_brewfile" &>/dev/null; then
    brew bundle install --file="$core_brewfile" --verbose
  else
    success "Core tools already installed"
  fi
  rm -f "$core_brewfile"
}

setup_zsh() {
  header "Setting up Zsh"
  if [[ ! -d "$HOME/.oh-my-zsh" ]]; then
    export RUNZSH=no
    export CHSH=no
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
    success "Oh My Zsh installed"
  else
    success "Oh My Zsh already installed"
  fi

  # Clone plugins
  local plugins_dir="${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins"
  mkdir -p "$plugins_dir"

  for repo in \
    https://github.com/zsh-users/zsh-syntax-highlighting \
    https://github.com/zsh-users/zsh-autosuggestions; do
    local name
    name=$(basename "$repo")
    if [[ ! -d "$plugins_dir/$name" ]]; then
      git clone "$repo" "$plugins_dir/$name"
      success "Installed $name"
    else
      success "$name already installed"
    fi
  done

  # Set default shell
  if [[ "$SHELL" != "$(brew --prefix)/bin/zsh" ]]; then
    chsh -s "$(brew --prefix)/bin/zsh"
    success "Default shell set to Homebrew zsh"
  fi
}

create_symlinks() {
  header "Creating symlinks for dotfiles"
  local src_dir dest
  src_dir="$(pwd)/dotfiles"
  for file in "$src_dir"/.*; do
    [[ "$(basename "$file")" =~ ^(\.|..|.git)$ ]] && continue
    dest="$HOME/$(basename "$file")"
    if [[ -f "$dest" && ! -L "$dest" ]]; then
      mv "$dest" "${dest}.backup.$(date +%s)"
      warn "Backed up $dest"
    fi
    ln -sf "$file" "$dest"
    success "Linked $(basename "$file")"
  done
}

install_apps() {
  header "Installing additional applications"
  if [[ -f Brewfile ]]; then
    brew bundle --file=Brewfile --verbose --no-upgrade || true
  else
    warn "No Brewfile found, skipping"
  fi
}

update_brew() {
  header "Updating Homebrew and cleaning up"
  brew update
  brew upgrade
  brew cleanup
  success "Homebrew updated and cleaned"
}

run_macdefaults() {
  if [[ -f macdefaults.sh ]]; then
    header "Applying macOS defaults"
    chmod +x ./macdefaults.sh
    ./macdefaults.sh
    success "macOS defaults applied"
  else
    warn "No macdefaults.sh found, skipping"
  fi
}

# ==============================
#   Main Execution
# ==============================
main() {
  # Logging
  mkdir -p ~/mrk1
  exec > >(tee -a "$HOME/mrk1/install.log") 2>&1

  check_network
  keep_sudo_alive

  install_xcode_cli
  install_homebrew
  update_brew
  install_core_tools
  setup_zsh
  create_symlinks
  install_apps
  run_macdefaults

  success "Setup complete! ðŸŽ‰ Restart your terminal to load the new shell."
}

main "$@"
