#!/usr/bin/env bash

# This script automates the entire setup process for a new macOS machine.
# It's idempotent, meaning it can be run multiple times safely.

set -euo pipefail

# --- Color & Style Constants ---
bold=$(tput bold)
cyan=$(tput setaf 6)
green=$(tput setaf 2)
red=$(tput setaf 1)
reset=$(tput sgr0)

# --- Functions ---

header() {
  echo
  echo "${cyan}${bold}==> ${*}...${reset}"
}

success() {
  echo "${green}✅ ${*}...${reset}"
}

warn() {
  echo "${red}⚠️  ${*}...${reset}"
}

# --- Installation Logic ---

install_xcode_tools() {
  header "Checking for Xcode Command Line Tools"
  if ! xcode-select -p &>/dev/null; then
    echo "Xcode Command Line Tools not found. Starting installation..."
    xcode-select --install

    # Add a pause to wait for the user to complete the installation
    read -p "Press [Enter] to continue after the Xcode Tools installation is complete."
  else
    success "Xcode Command Line Tools already installed"
  fi
}

install_homebrew() {
  header "Checking for Homebrew"
  if ! command -v brew &>/dev/null; then
    echo "Homebrew not found. Installing..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    # Add Homebrew to this script's PATH for immediate use
    eval "$(/opt/homebrew/bin/brew shellenv)"
  else
    success "Homebrew already installed"
  fi
}

install_core_tools() {
  header "Installing core tools with Homebrew"
  brew bundle --file=- <<EOF
cask "iterm2"
cask "pulsar"
brew "git"
brew "gh"
brew "zsh"
brew "coreutils"
brew "topgrade"
brew "bat"
brew "pwgen"
EOF
}

install_oh_my_zsh() {
  header "Checking for Oh My Zsh"
  if [[ ! -d "$HOME/.oh-my-zsh" ]]; then
    echo "Oh My Zsh not found. Installing..."
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
  else
    success "Oh My Zsh already installed"
  fi
}

install_zsh_plugins() {
    header "Installing Zsh plugins"
    local plugins_dir="$HOME/.oh-my-zsh/custom/plugins"
    mkdir -p "$plugins_dir"

    # Using simple indexed arrays for maximum shell compatibility.
    local plugin_names=("zsh-syntax-highlighting" "zsh-autosuggestions")
    local plugin_urls=(
        "https://github.com/zsh-users/zsh-syntax-highlighting.git"
        "https://github.com/zsh-users/zsh-autosuggestions.git"
    )

    for i in "${!plugin_names[@]}"; do
        local name="${plugin_names[i]}"
        local url="${plugin_urls[i]}"
        if [[ ! -d "$plugins_dir/$name" ]]; then
            echo "Installing $name..."
            git clone "$url" "$plugins_dir/$name"
        else
            success "$name already installed"
        fi
    done
}

copy_config_files() {
    header "Copying static configuration files"
    mkdir -p "$HOME/.config"

    local topgrade_src="$HOME/mrk1/assets/topgrade.toml"
    local topgrade_dest="$HOME/.config/topgrade.toml"

    if [[ -f "$topgrade_src" ]]; then
        echo "Copying $topgrade_src -> $topgrade_dest"
        cp -f "$topgrade_src" "$topgrade_dest"
    else
        warn "topgrade.toml not found in assets, skipping copy."
    fi
}

create_symlinks() {
    header "Creating symlinks for dotfiles"
    # This now correctly points to your dotfiles subdirectory
    local dotfiles_repo_dir="$HOME/mrk1/dotfiles"

    # List of files in your repo to symlink to the HOME directory.
    local files_to_link=(
        ".zshenv"
        ".zshrc"
        ".aliases"
        ".zprofile"
    )

    for file in "${files_to_link[@]}"; do
        local src="$dotfiles_repo_dir/$file"
        local dest="$HOME/$file"

        if [[ -f "$src" ]]; then
            echo "Linking $dest -> $src"
            ln -sf "$src" "$dest"
        else
            warn "Source file not found, skipping link: $src"
        fi
    done
}

switch_to_zsh() {
    header "Setting Homebrew Zsh as default shell"
    local brew_zsh="/opt/homebrew/bin/zsh"
    if ! grep -q "$brew_zsh" /etc/shells; then
        echo "Adding $brew_zsh to /etc/shells..."
        echo "$brew_zsh" | sudo tee -a /etc/shells
    fi
    if [[ "$SHELL" != "$brew_zsh" ]]; then
        echo "Changing default shell to $brew_zsh..."
        chsh -s "$brew_zsh"
        success "Shell changed! Please restart your terminal for it to take effect."
    else
        success "Default shell is already Homebrew Zsh"
    fi
}

# --- Main Execution ---

main() {
  install_xcode_tools
  install_homebrew
  install_core_tools
  install_oh_my_zsh
  install_zsh_plugins
  copy_config_files # <-- Added this step for config files
  create_symlinks   # <-- This now only handles dotfiles
  switch_to_zsh

  header "Final Steps"
    read -p "Run 'brew bundle install' to install all applications from Brewfile? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      brew bundle install --file="$HOME/mrk1/assets/Brewfile" --verbose
    else
      echo "Skipping full Brewfile installation. You can run it later with 'brew bundle --file=~/mrk1/assets/Brewfile'."
    fi

  echo
  echo "${green}${bold}✅ All done! Please restart your terminal to apply all changes.${reset}"
}

main "$@"
