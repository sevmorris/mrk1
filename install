#!/usr/bin/env zsh

set -e  # Exit immediately if a command fails

# ===== PATH VARIABLES =====
mrk1_dir="$HOME/mrk1"                    # Base directory for mrk1 project
dotfiles="$mrk1_dir/dotfiles"            # Location of dotfiles
scripts="$mrk1_dir/scripts"              # Location of project-specific scripts
mac_defaults="$scripts/macdefaults.sh"   # Script for macOS default tweaks

bin="$HOME/.local/bin"                   # User-specific binaries
OMZ_CUSTOM="$HOME/.oh-my-zsh/custom"      # Customizations for Oh My Zsh

cp -fv assets/topgrade.toml "$HOME/.config"   # Custom config file for topgrade
cp -fv assets/Brewfile "$HOME"                # Up-to-date Brewfile

# Create a directory for Preferences & Application Saved State
# backups if it doesn't already exist
backups_dir="$HOME/.backups"

if [ ! -d "$backups_dir" ]; then
    echo "Backups directory does not exist. Creating..."
    mkdir -p "$backups_dir"
fi

# Create symlinks for dotfiles in the home directory
echo "Creating dotfile symlinks in the home directory"
for file in "$dotfiles/.aliases" "$dotfiles/.zshenv" "$dotfiles/.zshrc"; do
    if [ -r "$file" ] && [ -f "$file" ]; then
        ln -sf "$file" "$HOME" || { echo "Error symlinking $file"; exit 1; }
    else
        echo "Skipping $file: Not a regular file or not readable"
    fi
done

# Create symlinks for scripts (backup, restore, syncall) in .local/bin directory
echo "Creating script symlinks in .local/bin directory"
for file in "$scripts/backup" "$scripts/restore" "$scripts/syncall"; do
    if [ -r "$file" ] && [ -f "$file" ]; then
        ln -sf "$file" "$bin" || { echo "Error symlinking $file"; exit 1; }
    else
        echo "Skipping $file: Not a regular file or not readable"
    fi
done

# Create symlink for .aliases in Oh My Zsh custom directory
echo "Creating symlink for .aliases in Oh My Zsh custom directory"
ln -sf "$dotfiles/.aliases" "$OMZ_CUSTOM"

# Apply macOS default tweaks
echo "Applying macOS default tweaks"
. "$mac_defaults"                      # Execute the macOS defaults script

# Create .hushlogin if necessary for suppressing login messages
if [ ! -f "$HOME/.hushlogin" ]; then
    touch "$HOME/.hushlogin"
fi

# Homebrew: Run 'brew bundle' from the home directory to ensure
# Brewfile is found and installations go into the correct locations.
cd "$HOME" && brew bundle install --verbose --no-lock
