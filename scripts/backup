#!/usr/bin/env bash

# Exit immediately if a command exits with a non-zero status.
set -e
# Treat unset variables as an error when substituting.
set -u
# Pipes fail if any command in the pipe fails.
set -o pipefail

# --- Configuration ---

# The primary backup destination is set to the local .backups directory.
backup_dir="$HOME/.backups"

# The secondary, optional backup destination.
# Backups will be made here ONLY if this directory exists (i.e., drive is connected).
external_backup_dir="/Volumes/Personal Backup/scripted_backup"

# Add the full paths of directories you want to back up to this array.
declare -a source_dirs=(
    "$HOME/Library/Saved Application State"
    "$HOME/Library/Preferences"
    "$HOME/Music/Audio Music Apps"
    "$HOME/Documents/iZotope"
    "$HOME/Library/Containers/com.xwavesoft.timetrackermac/Data/Documents"
)
# --- End Configuration ---

# --- Functions & Constants ---
bold=$(tput bold); red=$(tput setaf 1); green=$(tput setaf 2); yellow=$(tput setaf 3); cyan=$(tput setaf 6); reset=$(tput sgr0)
arrow() { echo; echo "${green}${bold}>>> ${reset}$*"; }

run_backup() {
    local source_path="$1"
    local dest_path="$2"
    local source_basename

    source_basename=$(basename "$source_path")
    arrow "Backing up ${cyan}${source_basename}${reset} to ${cyan}${dest_path}${reset}"

    # Using sudo to overcome potential permission errors.
    if sudo rsync -av --delete --ignore-errors "$source_path/" "$dest_path/$source_basename/"; then
        echo "✅ Backup of ${cyan}${source_basename}${reset} successful."
        return 0
    else
        echo "❌ ${bold}${red}Backup of ${cyan}${source_basename}${reset} failed!${reset}"
        return 1
    fi
}

# --- Main Script ---

# --- Prepare backup destinations ---
# Start with the default local backup directory.
declare -a backup_destinations=("$backup_dir")

# If the external drive is connected, add it to our list of destinations.
# Note: We check for the parent directory's existence, as the script will create the final one.
if [ -d "/Volumes/Personal Backup" ]; then
    arrow "External backup drive found: ${cyan}$external_backup_dir${reset}"
    backup_destinations+=("$external_backup_dir")
else
    echo "ℹ️  ${yellow}Optional external drive not found. Skipping.${reset}"
fi

# Create all backup destination directories if they don't exist.
for dest in "${backup_destinations[@]}"; do
    echo "Preparing backup location: ${cyan}$dest${reset}"
    # Use sudo in case parent directory permissions require it.
    sudo mkdir -p "$dest"
    # Ensure the current user owns the top-level backup directory.
    sudo chown "$USER" "$dest"
done

overall_status=0
# Loop through each source directory we want to back up.
for src in "${source_dirs[@]}"; do
    if [ -d "$src" ]; then
        # Loop through each destination (local and external if connected).
        for dest in "${backup_destinations[@]}"; do
            if ! run_backup "$src" "$dest"; then
                overall_status=1
            fi
        done
    else
        echo "⚠️  ${yellow}Warning: Source directory not found, skipping:${reset} $src"
    fi
done

echo
echo "${cyan}–––––––––––––––––––––––––––${reset}"
if [ $overall_status -eq 0 ]; then
    echo "🎉 ${bold}${green}All backups completed successfully!${reset}"
    # Write a log file to each backup destination.
    for dest in "${backup_destinations[@]}"; do
        date +"Last backup: %Y-%m-%d %r" > "$dest/last_backup.log"
    done
else
    echo "🔥 ${bold}${red}Some backups failed. Please review the output above.${reset}"
fi
echo "${cyan}–––––––––––––––––––––––––––${reset}"

exit $overall_status
