#!/usr/bin/env bash
# mrk1 single-command installer (hardened for curl | bash)
# Usage:
#   /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/sevmorris/mrk1/main/scripts/install)"
#
# Key fixes:
# - BASH_SOURCE fallback to $0 to avoid "unbound variable" under `set -u`
# - Robust REPO_DIR resolution (uses local clone if present, else clones)
# - Never resolves to /Users (missing username); always uses $HOME
# - Portable loops (no process substitution); clear, idempotent linking
set -euo pipefail
IFS=$'\n\t'

# ---------- helpers ----------
ok()   { printf '\033[32m✓ %s\033[0m\n' "$*"; }
warn() { printf '\033[33m⚠ %s\033[0m\n' "$*"; }
err()  { printf '\033[31m✗ %s\033[0m\n' "$*" >&2; }

set -E -o errtrace
trap 'err "Failed at ${FUNCNAME[0]:-main} line $LINENO: $BASH_COMMAND"' ERR

[ "${DEBUG:-0}" = "1" ] && set -x

# ---------- constants ----------
REPO_SLUG="sevmorris/mrk1"
REPO_URL="https://github.com/${REPO_SLUG}.git"
HOME_DIR="${HOME:-$PWD}"
DEST_DIR="${HOME_DIR}/.local/bin"
CHECKOUT_DIR="${HOME_DIR}/mrk1"

# Try to determine script directory if running from local file (not via curl)
# BASH_SOURCE may be unset under set -u in some shells; fall back to $0 and then PWD.
SCRIPT_PATH="${BASH_SOURCE[0]:-${0:-}}"
if [[ -n "${SCRIPT_PATH}" && -f "${SCRIPT_PATH}" ]]; then
  SCRIPT_DIR="$(cd "$(dirname "${SCRIPT_PATH}")" && pwd)"
else
  SCRIPT_DIR="$PWD"
fi

# Prefer an existing local repo at ~/mrk1; otherwise clone/update it
ensure_repo() {
  if [[ -d "${CHECKOUT_DIR}/.git" ]]; then
    ok "Using existing repo at ${CHECKOUT_DIR}"
    (cd "${CHECKOUT_DIR}" && git fetch --all -q && git pull -q) || true
  else
    ok "Cloning ${REPO_SLUG} to ${CHECKOUT_DIR}"
    git clone -q "${REPO_URL}" "${CHECKOUT_DIR}"
  fi
}

ensure_xcode_tools() {
  echo
  echo "==> Checking for Xcode Command Line Tools..."
  if ! xcode-select -p >/dev/null 2>&1; then
    xcode-select --install || true
    warn "If a dialog appeared, complete installation and re-run this installer."
  else
    ok "Xcode Command Line Tools already installed..."
  fi
}

ensure_homebrew() {
  echo
  echo "==> Checking for Homebrew..."
  if ! command -v brew >/dev/null 2>&1; then
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    # shellenv
    if [[ -f /opt/homebrew/bin/brew ]]; then
      eval "$(/opt/homebrew/bin/brew shellenv)"
    elif [[ -f /usr/local/bin/brew ]]; then
      eval "$(/usr/local/bin/brew shellenv)"
    fi
    ok "Homebrew installed."
  else
    ok "Homebrew already installed..."
  fi
  echo "==> Updating Homebrew..."
  brew update || true
}

brew_core_tools() {
  echo
  echo "==> Installing core tools via Homebrew Bundle..."
  local bf_core
  bf_core="$(mktemp)"
  cat > "${bf_core}" <<'BREW'
brew "git"
brew "gh"
brew "zsh"
brew "coreutils"
brew "topgrade"
brew "bat"
brew "pwgen"
cask "iterm2"
cask "pulsar"
BREW
  brew bundle --file "${bf_core}" || true
  ok "Core tools installed..."
}

install_ohmyzsh() {
  echo
  echo "==> Checking for Oh My Zsh..."
  if [[ -d "${HOME_DIR}/.oh-my-zsh" ]]; then
    ok "Oh My Zsh already installed..."
  else
    RUNZSH=no CHSH=no KEEP_ZSHRC=yes       sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
    ok "Oh My Zsh installed..."
  fi
}

install_zsh_plugins() {
  echo
  echo "==> Installing Zsh plugins..."
  local ZSH_CUSTOM="${HOME_DIR}/.oh-my-zsh/custom"
  mkdir -p "${ZSH_CUSTOM}/plugins"
  if [[ -d "${ZSH_CUSTOM}/plugins/zsh-syntax-highlighting" ]]; then
    ok "zsh-syntax-highlighting already installed..."
  else
    git clone -q https://github.com/zsh-users/zsh-syntax-highlighting.git "${ZSH_CUSTOM}/plugins/zsh-syntax-highlighting"
    ok "zsh-syntax-highlighting installed..."
  fi
  if [[ -d "${ZSH_CUSTOM}/plugins/zsh-autosuggestions" ]]; then
    ok "zsh-autosuggestions already installed..."
  else
    git clone -q https://github.com/zsh-users/zsh-autosuggestions "${ZSH_CUSTOM}/plugins/zsh-autosuggestions"
    ok "zsh-autosuggestions installed..."
  fi
}

setup_dotfiles_and_scripts() {
  echo
  echo "==> Setting up dotfiles and scripts..."
  ensure_repo
  local REPO_DIR="${CHECKOUT_DIR}"
  local ASSETS_DIR="${REPO_DIR}/assets"
  local DOTFILES_DIR="${REPO_DIR}/dotfiles"
  local SCRIPTS_DIR="${REPO_DIR}/scripts"

  echo "Copying static configuration files..."
  if [[ -f "${ASSETS_DIR}/topgrade.toml" ]]; then
    mkdir -p "${HOME_DIR}/.config"
    cp -f "${ASSETS_DIR}/topgrade.toml" "${HOME_DIR}/.config/topgrade.toml"
    ok "topgrade.toml installed."
  else
    warn "topgrade.toml not found at ${ASSETS_DIR}/topgrade.toml, skipping..."
  fi

  echo "Creating symlinks for dotfiles..."
  if [[ -d "${DOTFILES_DIR}" ]]; then
    find "${DOTFILES_DIR}" -maxdepth 1 -type f -print0 |     while IFS= read -r -d '' src; do
      base="$(basename "$src")"
      dest="${HOME_DIR}/.${base}"
      if [[ -L "$dest" || -e "$dest" ]]; then
        if [[ "$(readlink "$dest" 2>/dev/null || true)" == "$src" ]]; then
          ok "symlink exists: $dest"
        else
          warn "backup: $dest"
          mv "$dest" "${dest}.bak.$(date +%s)"
          ln -s "$src" "$dest"
          ok "linked: $dest -> $src"
        fi
      else
        ln -s "$src" "$dest"
        ok "linked: $dest -> $src"
      fi
    done
  else
    warn "dotfiles directory not found at ${DOTFILES_DIR}; skipping..."
  fi

  echo "Linking executable scripts..."
  mkdir -p "${DEST_DIR}"
  if [[ -d "${SCRIPTS_DIR}" ]]; then
    find "${SCRIPTS_DIR}" -maxdepth 1 -type f ! -name 'doctor' ! -name 'bootstrap' -print0 |     while IFS= read -r -d '' src; do
      if head -n1 "$src" | grep -q '^#!'; then
        base="$(basename "$src")"
        dest="${DEST_DIR}/${base}"
        if [[ -L "$dest" || -e "$dest" ]]; then
          if [[ "$(readlink "$dest" 2>/dev/null || true)" == "$src" ]]; then
            ok "symlink exists: $dest"
          else
            warn "backup: $dest"
            mv "$dest" "${dest}.bak.$(date +%s)"
            ln -sf "$src" "$dest"
            ok "linked: $dest -> $src"
          fi
        else
          ln -sf "$src" "$dest"
          ok "linked: $dest -> $src"
        fi
      fi
    done
  else
    warn "scripts directory not found at ${SCRIPTS_DIR}"
  fi
}

main() {
  ensure_xcode_tools
  ensure_homebrew
  brew_core_tools
  install_ohmyzsh
  install_zsh_plugins
  setup_dotfiles_and_scripts
  echo
  ok "Install complete. Open a new terminal (or 'exec zsh') to pick up changes."
}

main "$@"
