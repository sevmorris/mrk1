#!/usr/bin/env bash

# --- Safety & Strict Mode ---
set -e
set -u
set -o pipefail

# --- Configuration ---
local_backup_dir="$HOME/.backups"
external_backup_dir="/Volumes/Personal Backup/scripted_backup"
declare -a restore_destinations=(
    "$HOME/Library/Saved Application State"
    "$HOME/Library/Preferences"
    "$HOME/Music/Audio Music Apps"
    "$HOME/Documents/iZotope"
    "$HOME/Library/Containers/com.xwavesoft.timetrackermac/Data/Documents"
)
# --- End Configuration ---

# --- Functions & Constants ---
bold=$(tput bold); red=$(tput setaf 1); green=$(tput setaf 2); yellow=$(tput setaf 3); cyan=$(tput setaf 6); reset=$(tput sgr0)
arrow() { echo; echo "${green}${bold}>>> ${reset}$*"; }

run_restore() {
    local source_base_dir="$1"
    local dest_path="$2"
    local source_basename
    local source_path
    source_basename=$(basename "$dest_path")
    source_path="$source_base_dir/$source_basename/"
    arrow "Restoring ${cyan}$(basename "$dest_path")${reset} from ${cyan}$source_base_dir${reset}"
    if [ ! -d "$source_path" ]; then
        echo "ℹ️  ${yellow}Info: Source not found, skipping:${reset} $source_path"
        return 0
    fi

    # The -u flag ensures rsync only overwrites older files.
    # --delete is removed to prevent deleting files unique to one backup.
    if sudo rsync -avu "$source_path" "$dest_path/"; then
        echo "✅ Restore successful."
        return 0
    else
        echo "❌ ${bold}${red}Restore failed!${reset}"
        return 1
    fi
}

# --- Main Script ---
# --- Determine All Available Restore Sources ---
declare -a restore_sources=()
echo "🔎 Searching for backup sources..."
if [ -d "$local_backup_dir" ]; then
    echo "  ${green}Found:${reset} Local backup at ${cyan}$local_backup_dir${reset}"
    restore_sources+=("$local_backup_dir")
fi
if [ -d "$external_backup_dir" ]; then
    echo "  ${green}Found:${reset} External backup at ${cyan}$external_backup_dir${reset}"
    restore_sources+=("$external_backup_dir")
fi

if [ ${#restore_sources[@]} -eq 0 ]; then
    echo "❌ ${red}Error: No backup sources found. Aborting.${reset}"
    exit 1
fi

# --- Safety Check ---
echo
echo "${yellow}This script will restore files using the following sources ${bold}in order:${reset}"
for src in "${restore_sources[@]}"; do
    echo "  - ${cyan}$src${reset}"
done
echo "${yellow}${bold}Only newer files will be copied from the backup locations.${reset}"
read -p "Are you sure you want to continue? (y/n) " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Restore cancelled."
    exit 1
fi

# --- Run Restore ---
overall_status=0
for dest in "${restore_destinations[@]}"; do
    for source_dir in "${restore_sources[@]}"; do
        if ! run_restore "$source_dir" "$dest"; then
            overall_status=1
        fi
    done
done

echo
echo "${cyan}–––––––––––––––––––––––––––${reset}"
if [ $overall_status -eq 0 ]; then
    echo "🎉 ${bold}${green}All restore operations completed successfully!${reset}"
else
    echo "🔥 ${bold}${red}Some restore operations failed. Please review the output above.${reset}"
fi
echo "${cyan}–––––––––––––––––––––––––––${reset}"

exit $overall_status
